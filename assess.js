let dotnetHelper = null;

export function load() {
    return "";
}

export function initializeDotnetHelper(dotnetReference) {
    dotnetHelper = dotnetReference;
}

// Intended to be called via IJSInterop to prompt the download of a file generated by the Blazor app.
export function promptDownload(fileName, fileBytesBase64) {
    // Create a hidden <a href=""></a> where the "href" attribute contains the contents of the file in Base-64 form.
    var hyperlink = document.createElement("a");
    hyperlink.download = fileName;
    hyperlink.href = "data:application/octet-stream;base64," + fileBytesBase64;
    hyperlink.style = "display:none;";

    // Add the link tag to the end of the DOM..
    document.body.appendChild(hyperlink);

    // Simulate a click event to prompt the download.
    hyperlink.click();

    // Remove the link from the DOM.
    document.body.removeChild(hyperlink);
}

export function downloadCsv(fileName, content) {
    // Create a Blob from the CSV content with the correct MIME type for CSV
    const blob = new Blob([content], { type: 'text/csv' });
    const url = URL.createObjectURL(blob);

    // Create an invisible anchor element to initiate the download
    const anchor = document.createElement('a');
    anchor.href = url;
    anchor.download = fileName;
    anchor.style.display = 'none';

    // Append the anchor to the body, click it, and remove it
    document.body.appendChild(anchor);
    anchor.click();
    document.body.removeChild(anchor);

    // Release the object URL after the download is complete
    URL.revokeObjectURL(url);
}

export function downloadFile(filePath, fileName) {
    const anchor = document.createElement('a');
    anchor.href = filePath;
    anchor.download = fileName;
    anchor.style.display = 'none';
    document.body.appendChild(anchor);
    anchor.click();
    document.body.removeChild(anchor);
}

